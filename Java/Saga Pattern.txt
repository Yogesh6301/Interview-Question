Saga Pattern in Microservices


Definition:
The Saga pattern is used to manage distributed transactions across multiple microservices without using a global transaction or ACID gurantee
It ensures data consistency by breaking a long transaction into smaller local transactions, 
with compensation mechanisms for rollback in case of failure.

How it Works (Step-by-Step Example)
Scenario: E-commerce Order

Services involved:
Order Service → creates the order
Payment Service → deducts payment
Inventory Service → reserves items
Shipping Service → schedules shipment


Normal Flow:

Order is created → Order Service
Payment is processed → Payment Service
Inventory is reserved → Inventory Service
Shipping is scheduled → Shipping Service
Failure Handling:

Suppose Inventory Service fails after payment is deducted.
Saga ensures compensation transactions are triggered:
Refund payment → rollback step 2
Cancel order → rollback step 1
Thus, the system maintains eventual consistency across all microservices.

Types of Saga
1. Choreography-based Saga (Event-Driven)

Each service produces events and other services react to them.
No central coordinator; services coordinate themselves.
Pros: Simple, loosely coupled.
Cons: Harder to debug for complex workflows.

Example Flow:

Order Service creates order → publishes OrderCreatedEvent
Payment Service listens → deducts payment → publishes PaymentCompletedEvent
Inventory Service listens → reserves stock → publishes InventoryReservedEvent
If any step fails, each service handles its own compensation.

2. Orchestration-based Saga (Centralized)

A central orchestrator (Saga orchestrator) controls the sequence of service calls.

Orchestrator decides what to do next and triggers compensation in case of failure.
Pros: Easier to monitor, debug, and control complex workflows.
Cons: Introduces a single point of failure if orchestrator goes down.

Example Flow:

Saga orchestrator calls:
OrderService.createOrder()
PaymentService.deductPayment()
InventoryService.reserveStock()
If Inventory fails, orchestrator calls:
PaymentService.refundPayment()
OrderService.cancelOrder()